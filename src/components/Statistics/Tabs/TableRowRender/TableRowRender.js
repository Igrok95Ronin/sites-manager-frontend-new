// TableRowRender.js
// –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –†–∞–Ω–µ–µ —ç—Ç–æ –±—ã–ª–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rowContent. –¢–µ–ø–µ—Ä—å –º—ã —Å–¥–µ–ª–∞–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º TableRowRender (–∏–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é).

import React from 'react';
import { TableCell, Button, Checkbox } from '@mui/material';
import { JSONTree } from 'react-json-tree';
import CheckIcon from '@mui/icons-material/Check';
import CloseIcon from '@mui/icons-material/Close';
import DataObjectIcon from '@mui/icons-material/DataObject';
import BlockIcon from '@mui/icons-material/Block'; // –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';

import { Tooltip, Chip } from '@mui/material';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';

import { isToday, isSameYear } from 'date-fns'; // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç
import IPInfo from '../IPInfo/IPInfo.js';
import AlertDialog from '../../HeadersJS/AlertDialog/AlertDialog.js';
import IncognitoIcon from '@mui/icons-material/Visibility'; // –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–∫–æ–Ω–∫–æ–π –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import axiosInstance from '../../../../axiosInstance'; // –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤

export default function TableRowRender({
  row,
  rows,
  visibleColumns,
  checkedRows,
  handleCheckboxChange,
  expandedCell,
  setExpandedCell,
  formattedJSON,
  setFormattedJSON,
  setFilterByDomain,
  setFilterCompanyID,
  setFilterAccountID,
  setFilterKeyword,
  setFilterFingerprint,
  setFilterMotionDataRaw,
  setFilterIP,
  setFilterTimeSpent,
  doubleOutput,
  companyIDData,
  dataGoogleAccounts,
}) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è is_reference
  const [isReference, setIsReference] = React.useState(row.IsReference || false);
  const [hoveredDomain, setHoveredDomain] = React.useState(false);
  const [copySuccess, setCopySuccess] = React.useState(false);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è IsReference
  const handleReferenceChange = async (clickId, newValue) => {
    try {
      const response = await axiosInstance.post('/reference/update', {
        id: parseInt(clickId, 10), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        isReference: newValue
      });
      
      if (response.status === 200) {
        setIsReference(newValue);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ row –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        row.IsReference = newValue;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ reference —Å—Ç–∞—Ç—É—Å–∞:', error);
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setIsReference(!newValue);
    }
  };
  // valueRenderer –¥–ª—è JSONTree (—Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.)
  function valueRenderer(valueAsString, value) {
    if (typeof value === 'string' && /^https?:\/\//i.test(value)) {
      return (
        <a
          href={value}
          target="_blank"
          rel="noopener noreferrer"
          style={{
            color: '#4caf50',
            textDecoration: 'underline',
            cursor: 'pointer',
          }}
        >
          {valueAsString}
        </a>
      );
    }
    return valueAsString;
  }

  const isChecked = checkedRows[row.ID] || false;
  const isClickOnNumberTrue = row['ClickOnNumber'];
  const rowBackgroundColor = isClickOnNumberTrue ? 'rgb(211 248 212)' : isChecked ? '#e0f7fa' : 'inherit';

  // WebView
  const headers = typeof row.Headers === 'string' ? JSON.parse(row.Headers) : row.Headers;
  const userAgent = headers?.['User-Agent'] || '';
  const xRequestedWith = headers?.['X-Requested-With'] || '';

  const isWebViewBot =
    userAgent.includes('wv') && typeof xRequestedWith === 'string' && xRequestedWith.startsWith('com.');

  return (
    <>
      {/* –ß–µ–∫–±–æ–∫—Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ */}
      <TableCell className="statistics__checked" align="left" style={{ backgroundColor: rowBackgroundColor }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          <Checkbox checked={isChecked} onChange={handleCheckboxChange(row.ID)} />

          {/* –ú–µ—Ç–∫–∞ WebView */}
          {isWebViewBot && (
            <Tooltip title="–û–±–Ω–∞—Ä—É–∂–µ–Ω WebView –±–æ—Ç (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)">
              <Chip size="small" color="error" variant="outlined" icon={<BlockIcon />} label="WV" />
            </Tooltip>
          )}

          {/* –û—Ç–º–µ—Ç–∫–∞, –µ—Å–ª–∏ –±—ã–ª –∫–ª–∏–∫ –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É */}
          {row.ClickOnInvisibleNumber && (
            <Tooltip title="–ë—ã–ª –∫–ª–∏–∫ –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É">
              <Chip size="small" color="warning" variant="container" icon={<VisibilityOffIcon />} />
            </Tooltip>
          )}

          {/* –ê–Ω–∞–ª–∏–∑ JS-–¥–∞–Ω–Ω—ã—Ö –∏ Headers */}
          {(() => {
            try {
              const jsData = typeof row.JsData === 'string' ? JSON.parse(row.JsData) : row.JsData;
              const headers = typeof row.Headers === 'string' ? JSON.parse(row.Headers) : row.Headers;

              let score = 0;
              let total = 0;
              const log = [];

              // navigator.languages.length
              total++;
              if (Array.isArray(jsData.languages) && jsData.languages.length === 1) {
                score++;
                log.push('üåç navigator.languages.length === 1 ‚Üí ‚ö†Ô∏è +1 (–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)');
              } else {
                log.push('üåç navigator.languages.length > 1 ‚Üí ‚úÖ 0');
              }

              // navigator.language
              total++;
              if (jsData.language === 'ru') {
                score += 0.5;
                log.push("üó£ navigator.language === 'ru' ‚Üí ‚ö†Ô∏è +0.5 (–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)");
              } else {
                log.push("üó£ navigator.language !== 'ru' ‚Üí ‚úÖ 0");
              }

              // navigator.plugins.length
              total++;
              if (jsData.pluginsLength === 0) {
                score++;
                log.push('üîå navigator.plugins.length === 0 ‚Üí ‚ö†Ô∏è +1 (–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)');
              } else {
                log.push(`üîå navigator.plugins.length = ${jsData.pluginsLength} ‚Üí ‚úÖ 0`);
              }

              // totalJSHeapSize
              if (jsData.totalJSHeapSize) {
                total++;
                log.push(`üß† totalJSHeapSize: ${jsData.totalJSHeapSize}`);
                if (jsData.totalJSHeapSize < 15000000) {
                  score++;
                  log.push('üß† –ú–∞–ª–µ–Ω—å–∫–∏–π JS heap ‚Üí ‚ö†Ô∏è +1 (–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)');
                } else {
                  log.push('üß† –û–±—ä–µ–º –ø–∞–º—è—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí ‚úÖ 0');
                }
              } else {
                log.push('üß† performance.memory –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Üí ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ');
              }

              // Sec-Fetch-Storage-Access
              if (headers['Sec-Fetch-Storage-Access']) {
                total++;
                const value = headers['Sec-Fetch-Storage-Access'].toLowerCase();
                log.push(`üì¶ Sec-Fetch-Storage-Access: "${value}"`);
                if (value === 'none') {
                  score++;
                  log.push('üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Üí ‚ö†Ô∏è +1 (–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)');
                } else {
                  log.push('üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω–æ ‚Üí ‚úÖ 0');
                }
              } else {
                log.push('üì¶ Sec-Fetch-Storage-Access –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ');
              }

              // StorageQuota (–≤ –±–∞–π—Ç–∞—Ö)
              if (row.StorageQuota && !isNaN(row.StorageQuota) && row.StorageQuota !== 0) {
                total++;
                const quotaMB = row.StorageQuota / 1024 / 1024;
                log.push(`üì¶ storageQuota: ${quotaMB.toFixed(2)} MB`);
                if (quotaMB < 10000) {
                  score++;
                  log.push('üì¶ –ú–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏ ‚Üí ‚ö†Ô∏è +1 (–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ)');
                } else {
                  log.push('üì¶ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ ‚Üí ‚úÖ 0');
                }
              } else {
                log.push('üì¶ StorageQuota –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–ª–∏ = 0 ‚Üí ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ');
              }

              const confidence = Math.min(Math.round((score / total) * 100), 100);
              if (confidence === 0) return null;

              let verdict = '';
              if (confidence >= 75) {
                verdict = 'üïµÔ∏è –í—ã–≤–æ–¥: –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ';
              } else if (confidence >= 50) {
                verdict = '‚ö†Ô∏è –í—ã–≤–æ–¥: –í–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ';
              } else {
                verdict = '‚úÖ –í—ã–≤–æ–¥: –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º';
              }

              return (
                <Tooltip
                  title={
                    <div style={{ whiteSpace: 'pre-line', maxWidth: '500px' }}>
                      <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –∏–ª–∏ –Ω–µ—Ç)</b>
                      <br />
                      {log.map((line, i) => (
                        <div key={i}>{line}</div>
                      ))}
                      <br />
                      üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {confidence}%<br />
                      {verdict}
                    </div>
                  }
                >
                  <Chip
                    size="small"
                    color={confidence >= 75 ? 'error' : confidence >= 50 ? 'warning' : 'success'}
                    variant="outlined"
                    icon={<IncognitoIcon />}
                    label={`${confidence}%`}
                  />
                </Tooltip>
              );
            } catch (e) {
              return null;
            }
          })()}

          {/* –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ User-Agent */}
          {(() => {
            try {
              const jsData = typeof row.JsData === 'string' ? JSON.parse(row.JsData) : row.JsData;
              const headers = typeof row.Headers === 'string' ? JSON.parse(row.Headers) : row.Headers;

              const headersUA = headers?.['User-Agent'] || '';
              const jsUA = jsData?.userAgent || '';

              if (headersUA && jsUA && headersUA !== jsUA) {
                return (
                  <Tooltip
                    title={
                      <div style={{ whiteSpace: 'pre-line', maxWidth: '400px' }}>
                        ‚ö†Ô∏è <b>–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ User-Agent</b>
                        {'\n'}
                        <b>Headers:</b> {headersUA}
                        {'\n'}
                        <b>JS:</b> {jsUA}
                        {'\n'}
                        –í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–º–µ–Ω—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è.
                      </div>
                    }
                  >
                    <Chip size="small" color="warning" variant="outlined" icon={<BlockIcon />} label="UA" />
                  </Tooltip>
                );
              }
              return null;
            } catch (e) {
              return null;
            }
          })()}
        </div>
      </TableCell>

      {visibleColumns.map((column) => {
        const cellKey = column.dataKey;
        const cellValue = row[cellKey];

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è IsReference —á–µ–∫–±–æ–∫—Å–∞
        if (cellKey === 'IsReference') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="center"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Checkbox
                checked={isReference}
                onChange={(e) => handleReferenceChange(row.ID, e.target.checked)}
                color="primary"
                size="small"
              />
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è windowSize
        if (cellKey === 'windowSize') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              {`${row.innerWidth || 'N/A'} x ${row.innerHeight || 'N/A'}`}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è outerWindowSize
        if (cellKey === 'outerWindowSize') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              {`${row.outerWidth || 'N/A'} x ${row.outerHeight || 'N/A'}`}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è screenSize
        if (cellKey === 'screenSize') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              {`${row.screenWidth || 'N/A'} x ${row.screenHeight || 'N/A'}`}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è ClickOnNumber
        if (cellKey === 'ClickOnNumber') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              {cellValue ? <CheckIcon color="success" /> : <CloseIcon color="error" />}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è ClickOnNumber
        if (cellKey === 'ClickOnInvisibleNumber') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              {cellValue ? <CheckIcon color="success" /> : <CloseIcon color="error" />}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è StorageQuota
        if (cellKey === 'StorageQuota') {
          const quotaInMB = cellValue ? (cellValue / 1024 / 1024).toFixed(2) : '0.00';

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              {quotaInMB} MB
            </TableCell>
          );
        }

        // –ü–æ–ª–µ –¥–∞—Ç—ã CreatedAt
        if (cellKey === 'CreatedAt') {
          const date = new Date(cellValue);
          const today = isToday(date);
          const sameYear = isSameYear(date, new Date());

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor, color: '#009688', fontWeight: 'bold' }}
            >
              {today ? (
                // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∑–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                <span>{date.toLocaleTimeString('ru-RU', { timeZone: 'Europe/Moscow' })}</span>
              ) : sameYear ? (
                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≥–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≥–æ–¥–∞
                `${date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })} | ${date.toLocaleTimeString(
                  'ru-RU',
                  { timeZone: 'Europe/Moscow' },
                )}`
              ) : (
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Å –≥–æ–¥–æ–º
                date.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
              )}
            </TableCell>
          );
        }

        // –ü–æ–ª–µ ClickCoordinates
        if (cellKey === 'ClickCoordinates') {
          let coords = '';
          let timeStr = '';
          let last4 = '';

          if (typeof cellValue === 'string') {
            const parts = cellValue.trim().split(/\s+/);
            coords = parts.slice(0, 2).join(' '); // X:... Y:...
            timeStr = parts[2] || '';              // HH:MM:SS
            last4 = parts[3] ? parts[3].replace('#', '') : '';
          }

          let dateFormatted = timeStr;
          if (/^\d{2}:\d{2}:\d{2}$/.test(timeStr)) {
            // –î–µ–ª–∞–µ–º Date —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π + —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            const [h, m, s] = timeStr.split(':').map(Number);
            const dateObj = new Date();
            // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–≤–∏–º UTC, –ø–æ—Ç–æ–º –ª–æ–∫–∞–ª–∏–∑—É–µ–º
            dateObj.setUTCHours(h, m, s, 0);

            dateFormatted = dateObj.toLocaleTimeString('ru-RU', {
              timeZone: 'Europe/Moscow',
            });
          }

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{
                backgroundColor: rowBackgroundColor,
                fontWeight: 'bold',
                whiteSpace: 'nowrap'
              }}
            >
              <span style={{ color: '#555', marginRight: '8px' }}>{coords}</span>
              <span style={{ color: '#009688', marginRight: '8px' }}>{dateFormatted}</span>
              {last4 && (
                <span
                  style={{
                    backgroundColor: '#e0f7fa',
                    padding: '2px 6px',
                    borderRadius: '4px',
                    color: '#00796b',
                    fontWeight: 'bold'
                  }}
                >
                  {last4}
                </span>
              )}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Domain (—Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–æ–º–µ–Ω—É)
        if (cellKey === 'Domain') {
          const handleCopyUrl = () => {
            const url = `https://${cellValue}`;
            navigator.clipboard.writeText(url).then(() => {
              setCopySuccess(true);
              setTimeout(() => setCopySuccess(false), 2000);
            });
          };

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ 
                backgroundColor: rowBackgroundColor,
                position: 'relative'
              }}
              onMouseEnter={() => setHoveredDomain(true)}
              onMouseLeave={() => setHoveredDomain(false)}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                <Button
                  variant="text"
                  size="small"
                  color="secondary"
                  onClick={() => setFilterByDomain(cellValue)}
                  sx={{
                    textTransform: 'none',
                    whiteSpace: 'nowrap',
                  }}
                >
                  {cellValue}
                </Button>
                
                {/* –ö–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '2px',
                  opacity: hoveredDomain ? 1 : 0,
                  visibility: hoveredDomain ? 'visible' : 'hidden',
                  transition: 'opacity 0.2s ease, visibility 0.2s ease',
                }}>
                  {/* –ö–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç */}
                  <Tooltip title="–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç">
                    <a
                      href={`https://${cellValue}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      onClick={(e) => e.stopPropagation()}
                      style={{
                        color: '#1976d2',
                        padding: '4px',
                        display: 'inline-flex',
                        alignItems: 'center',
                        cursor: 'pointer',
                        borderRadius: '4px',
                        transition: 'background-color 0.2s',
                      }}
                      onMouseEnter={(e) => e.target.style.backgroundColor = 'rgba(25, 118, 210, 0.08)'}
                      onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                    >
                      <OpenInNewIcon fontSize="small" />
                    </a>
                  </Tooltip>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è URL */}
                  <Tooltip title={copySuccess ? "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!" : "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL"}>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleCopyUrl();
                      }}
                      style={{
                        color: copySuccess ? '#4caf50' : '#666',
                        padding: '4px',
                        display: 'inline-flex',
                        alignItems: 'center',
                        cursor: 'pointer',
                        border: 'none',
                        background: 'transparent',
                        borderRadius: '4px',
                        transition: 'all 0.2s',
                      }}
                      onMouseEnter={(e) => {
                        if (!copySuccess) {
                          e.target.style.backgroundColor = 'rgba(0, 0, 0, 0.04)';
                          e.target.style.color = '#333';
                        }
                      }}
                      onMouseLeave={(e) => {
                        e.target.style.backgroundColor = 'transparent';
                        if (!copySuccess) {
                          e.target.style.color = '#666';
                        }
                      }}
                    >
                      <ContentCopyIcon fontSize="small" />
                    </button>
                  </Tooltip>
                </div>
              </div>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è TimeSpent (—Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        if (cellKey === 'TimeSpent') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Button
                variant="text"
                size="small"
                color="secondary"
                onClick={() => setFilterTimeSpent(cellValue)}
                sx={{
                  textTransform: 'none',
                  whiteSpace: 'nowrap',
                }}
              >
                {cellValue}
              </Button>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è CompanyID (—Ñ–∏–ª—å—Ç—Ä –ø–æ CompanyID)
        if (cellKey === 'CompanyID') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Button
                variant="text"
                size="small"
                color="secondary"
                onClick={() => setFilterCompanyID(cellValue)}
                sx={{
                  textTransform: 'none',
                  whiteSpace: 'nowrap',
                }}
              >
                {/* –ù–∞—Ö–æ–¥–∏–º –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç—É —Ç–æ CompanyID */}
                {(() => {
                  const company = companyIDData.find((company) => company.CompanyID === cellValue);
                  return company ? company.Name : cellValue;
                })()}
              </Button>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è AccountID (—Ñ–∏–ª—å—Ç—Ä –ø–æ CompanyID)
        if (cellKey === 'AccountID') {
          // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
          let background = rowBackgroundColor;
          const value = (cellValue || '').toLowerCase();

          // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          if (value !== '-') background = '#dbceff'; // Mobile
          else if (value === '-') background = '#dbe5ff'; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Button
                variant="text"
                size="small"
                color="secondary"
                onClick={() => setFilterAccountID(cellValue)}
                sx={{
                  textTransform: 'none',
                  whiteSpace: 'nowrap',
                  width: '100%',
                  color: '#423671',
                }}
              >
                <div
                  style={{
                    fontSize: 'inherit',
                    backgroundColor: background,
                    width: '100%',
                    padding: '0 10px',
                    borderRadius: '5px',
                  }}
                >
                  {/* –ù–∞—Ö–æ–¥–∏–º –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç—É —Ç–æ CompanyID */}
                  {(() => {
                    const account = dataGoogleAccounts.find((account) => account.account_id === cellValue);
                    return account ? account.email : cellValue;
                  })()}
                </div>
              </Button>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Keyword (—Ñ–∏–ª—å—Ç—Ä –ø–æ CompanyID)
        if (cellKey === 'Keyword') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Button
                variant="text"
                size="small"
                color="secondary"
                onClick={() => setFilterKeyword(cellValue)}
                sx={{
                  textTransform: 'none',
                  whiteSpace: 'nowrap',
                }}
              >
                {cellValue}
              </Button>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è IsFirstVisit (–æ—Ç–º–µ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏)
        if (cellKey === 'IsFirstVisit') {
          const isFirst = cellValue === true || cellValue === 'true';
          const isFalse = cellValue === false || cellValue === 'false';
          const isUnknown = !isFirst && !isFalse;

          let backgroundColor = '#ffd5d5'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∞—Å–Ω—ã–π (–Ω–µ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç)
          if (isFirst) backgroundColor = '#d0f0c0'; // –∑–µ–ª—ë–Ω—ã–π
          else if (isUnknown) backgroundColor = '#e0e0e0'; // —Å–µ—Ä—ã–π

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{
                backgroundColor,
                textAlign: 'center',
              }}
            >
              {isFirst ? (
                <Tooltip title="‚úÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç –∑–∞ —Å—É—Ç–∫–∏ (–Ω–∞ —ç—Ç–æ–º –¥–æ–º–µ–Ω–µ)" arrow placement="left">
                  <CheckIcon color="success" />
                </Tooltip>
              ) : isFalse ? (
                <Tooltip title="‚ùå –ù–µ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç" arrow placement="left">
                  <CloseIcon color="error" />
                </Tooltip>
              ) : (
                <Tooltip title="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ / –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç" arrow placement="left">
                  <span style={{ fontSize: '18px', fontWeight: 'bold' }}>?</span>
                </Tooltip>
              )}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è HadTouchBeforeScroll (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –±—ã–ª –ª–∏ —Å–∫—Ä–æ–ª–ª —Å –∫–∞—Å–∞–Ω–∏–µ–º/–º—ã—à—å—é)
        if (cellKey === 'HadTouchBeforeScroll') {
          const value = cellValue;

          let backgroundColor = '#f5f5f5';
          let icon = null;
          let tooltip = '';

          if (value === true) {
            backgroundColor = '#d0f0c0';
            icon = <CheckIcon color="success" />;
            tooltip = '‚úÖ –ë—ã–ª–æ –∫–∞—Å–∞–Ω–∏–µ –∏–ª–∏ –º—ã—à—å –¥–æ —Å–∫—Ä–æ–ª–ª–∞';
          } else if (value === false) {
            backgroundColor = '#fff3cd';
            icon = <CloseIcon color="warning" />;
            tooltip = '‚ö† –°–∫—Ä–æ–ª–ª –±—ã–ª –±–µ–∑ –∫–∞—Å–∞–Ω–∏—è –∏–ª–∏ –º—ã—à–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç';
          } else {
            backgroundColor = '#e0e0e0';
            tooltip = 'ü§∑ –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ª–∏–±–æ –Ω–µ –±—ã–ª–æ —Å–∫—Ä–æ–ª–ª–∞, –ª–∏–±–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Ñ–ª–∞–≥';
            icon = <span style={{ fontWeight: 'bold' }}>?</span>;
          }

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{
                backgroundColor,
                textAlign: 'center',
              }}
            >
              <Tooltip title={tooltip} arrow placement="left">
                {icon}
              </Tooltip>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è ClickCallType + HadTouchBeforeScroll (—Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
        if (cellKey === 'ClickCallType') {
          const type = row.ClickCallType;

          let icon = <span style={{ fontWeight: 'bold' }}>?</span>;
          let title = 'ü§∑ –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –∫–ª–∏–∫–∞';
          let backgroundColor = '#e0e0e0';

          if (type === 'touch') {
            icon = <CheckIcon color="success" />;
            title = '‚úÖ –ö–ª–∏–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Å –∫–∞—Å–∞–Ω–∏–µ–º (touch) ‚Äî —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω';
            backgroundColor = '#d0f0c0';
          } else if (type === 'mouse') {
            icon = <CheckIcon color="info" />;
            title = 'üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º—ã—à—å—é';
            backgroundColor = '#f0f4c3';
          } else if (type === 'none') {
            icon = <BlockIcon color="error" />;
            title = 'üö´ –ö–ª–∏–∫ –±–µ–∑ –º—ã—à–∏ –∏ —Ç–∞—á–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç';
            backgroundColor = '#f8d7da';
          }

          return (
            <TableCell className="statistics__padding" key={cellKey} align="center" style={{ backgroundColor }}>
              <Tooltip title={title} arrow placement="left">
                <span>{icon}</span>
              </Tooltip>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Fingerprint (—Ñ–∏–ª—å—Ç—Ä –ø–æ Fingerprint)
        if (cellKey === 'Fingerprint') {
          // –ï—Å–ª–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
          if (!cellValue || cellValue === '...' || cellValue.trim() === '') {
            return (
              <TableCell
                className="statistics__padding"
                key={cellKey}
                align="center"
                style={{ backgroundColor: rowBackgroundColor }}
              >
                <Tooltip title="–û—Ç–ø–µ—á–∞—Ç–æ–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω">
                  <BlockIcon color="disabled" />
                </Tooltip>
              </TableCell>
            );
          }

          const shortFingerprint = cellValue.substring(0, 8) + '...';
          const currentDomain = row.Domain;

          const allRowsWithSameFingerprint = rows.filter((r) => r.Fingerprint === cellValue);
          const countAll = allRowsWithSameFingerprint.length;
          const countCurrentDomain = allRowsWithSameFingerprint.filter((r) => r.Domain === currentDomain).length;

          // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ö–æ–¥–æ–≤
          let chipColor = 'default';
          if (countAll >= 10) chipColor = 'error';
          else if (countAll >= 5) chipColor = 'warning';
          else chipColor = 'success'; // —á–∏—Å—Ç—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫

          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Tooltip
                arrow
                placement="left"
                title={
                  <div style={{ whiteSpace: 'pre-line' }}>
                    üÜî <b>–¶–∏—Ñ—Ä–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞:</b> {cellValue}
                    {'\n'}
                    {'\n'}
                    üåê <b>–î–æ–º–µ–Ω:</b> {currentDomain}
                    {'\n'}
                    üîÅ –ù–∞ —ç—Ç–æ—Ç –¥–æ–º–µ–Ω: {countCurrentDomain}
                    {'\n'}
                    üìä –í—Å–µ–≥–æ –ø–æ –≤—Å–µ–º –¥–æ–º–µ–Ω–∞–º: {countAll}
                  </div>
                }
              >
                <Chip
                  label={`${shortFingerprint} (${countCurrentDomain}/${countAll})`}
                  size="small"
                  color={chipColor}
                  onClick={() => setFilterFingerprint(cellValue)}
                  sx={{
                    cursor: 'pointer',
                    fontWeight: 'bold',
                  }}
                />
              </Tooltip>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è MotionDataRaw (–∞–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        if (cellKey === 'MotionDataRaw') {
          try {
            const motionData =
              typeof row.MotionDataRaw === 'string' ? JSON.parse(row.MotionDataRaw) : row.MotionDataRaw;

            const deltaSum = motionData?.deltaSum || 0;
            const start = motionData?.start;
            const end = motionData?.end;
            const analyzeDelayMs = motionData?.analyzeDelayMs;
            const status = motionData?.status || 'unknown';
            const permissionState = motionData?.permissionState || 'default';
            // console.log(motionData)

            let icon = <HelpOutlineIcon />;
            let color = 'default';
            let shortLabel = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            let fullLabel = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–≤–∏–∂–µ–Ω–∏—è';

            if (status === 'no-data') {
              icon = <ErrorIcon />;
              color = 'warning';
              shortLabel = '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
              fullLabel = `
            ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π –±–æ—Ç ‚Äî –Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            
            üì± –ù–∞ iPhone (iOS):
            - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–µ–Ω—Å–æ—Ä—ã, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ç—É—Å no-data.
            - –≠—Ç–æ **–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–º –±–æ—Ç–∞**, –µ—Å–ª–∏ permissionState = default –∏–ª–∏ denied.
            
            üñ• –ù–∞ Android/–¥–µ—Å–∫—Ç–æ–ø–∞—Ö:
            - –°–µ–Ω—Å–æ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏.
            - –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
              - JavaScript –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
              - Headless –±—Ä–∞—É–∑–µ—Ä.
              - –ë–æ—Ç —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.
            
            ‚úÖ –°—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º, **–µ—Å–ª–∏ —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è** –Ω–∞ Android –∏–ª–∏ –ü–ö.
              `.trim();
            } else if (status === 'no-sensor') {
              icon = <BlockIcon />;
              color = 'default';
              shortLabel = 'üñ• –ù–µ—Ç —Å–µ–Ω—Å–æ—Ä–æ–≤';
              fullLabel = `
        üñ• –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ã—á–Ω—ã–π –ü–ö
        
        –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —Å–µ–Ω—Å–æ—Ä–æ–≤ (–æ–±—ã—á–Ω—ã–π –¥–µ—Å–∫—Ç–æ–ø –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫).
        
        ‚ùó –ù–µ –ø—Ä–∏–∑–Ω–∞–∫ –±–æ—Ç–∞ —Å–∞–º –ø–æ —Å–µ–±–µ, –Ω–æ –µ—Å–ª–∏:
        - navigator.plugins.length === 0
        - –∏ –Ω–µ—Ç touchstart –∏–ª–∏ scroll
        - –∏ –Ω–µ—Ç –∫–ª–∏–∫–æ–≤
        - –∏ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
        ‚Üí —ç—Ç–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è.
              `.trim();
            } else if (status === 'not-enough') {
              icon = <ErrorIcon />;
              color = 'warning';
              shortLabel = '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ';
              fullLabel = `
        ‚ö†Ô∏è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        
        –°–µ–Ω—Å–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω–µ–µ 2 –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.
        
        –ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –≤ headless –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö WebView.
        
        ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.
              `.trim();
            } else if (status === 'no-permission') {
              icon = <BlockIcon />;
              color = 'warning';
              shortLabel = 'üìµ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞';
              fullLabel = `
        üìµ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Å–µ–Ω—Å–æ—Ä–∞–º (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º iOS Safari).
        
        üü° –ù–µ –≤—Å–µ–≥–¥–∞ –±–æ—Ç, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å.
              `.trim();
            } else if (status === 'unknown') {
              icon = <HelpOutlineIcon />;
              color = 'default';
              shortLabel = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
              fullLabel = `
        ‚ùì –°–∫—Ä–∏–ø—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è
        
        –°—Ç–∞—Ç—É—Å unknown –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–æ—Å—å ‚Äî –ø–ª–æ—Ö–æ –∏—Å–ø–æ–ª–Ω—è–ª—Å—è —Å–∫—Ä–∏–ø—Ç.
        
        üü° –ù–µ –≤—Å–µ–≥–¥–∞ –±–æ—Ç, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å.
              `.trim();
            } else if (status === 'ok') {
              if (deltaSum > 5) {
                icon = <CheckCircleIcon />;
                color = 'success';
                shortLabel = '‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ';
                fullLabel = `
        ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ
        
        –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ–Ω—Å–æ—Ä–∞–º–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏–µ.
        
        –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
                `.trim();
              } else {
                icon = <ErrorIcon />;
                color = 'error';
                shortLabel = 'üö® –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è';
                fullLabel = `
        üö® –Ω–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è (Œî < 5)
        
        –≠—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, –≥–¥–µ —Å–µ–Ω—Å–æ—Ä—ã –µ—Å—Ç—å, –Ω–æ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ—Ç.
        
        –û—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–∫–ª–∏–∫, —Å–∫—Ä–æ–ª–ª).
        
        ‚úÖ –≠—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
                `.trim();
              }
            }

            const permissionReadable = {
              granted: '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
              denied: '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
              default: 'ü§∑ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)',
            };

            const techDetails = `
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–æ–≤: ${deltaSum.toFixed(2)}¬∞
        üìç –ù–∞—á–∞–ª–æ: Œ≤ ${start?.beta ?? '-'}, Œ≥ ${start?.gamma ?? '-'}
        üéØ –ö–æ–Ω–µ—Ü: Œ≤ ${end?.beta ?? '-'}, Œ≥ ${end?.gamma ?? '-'}
        ‚è± –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑: ${analyzeDelayMs ?? '‚Äî'} –º—Å
        üîê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ iOS: ${permissionReadable[permissionState]}
            `.trim();

            const tooltipText = `${fullLabel}\n\n${techDetails}`;

            return (
              <TableCell className="statistics__padding" key={cellKey} align="center">
                <Tooltip
                  title={<pre style={{ whiteSpace: 'pre-line', maxWidth: 300 }}>{tooltipText}</pre>}
                  arrow
                  placement="left"
                >
                  <Chip
                    size="small"
                    color={color}
                    icon={icon}
                    label={shortLabel}
                    variant="outlined"
                    onClick={() => setFilterMotionDataRaw(shortLabel)}
                    sx={{ fontWeight: 'bold', cursor: 'pointer' }}
                  />
                </Tooltip>
              </TableCell>
            );
          } catch (e) {
            return (
              <TableCell className="statistics__padding" key={cellKey} align="center">
                <Tooltip title="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ MotionDataRaw">
                  <Chip size="small" color="error" icon={<BlockIcon />} label="–û—à–∏–±–∫–∞" variant="outlined" />
                </Tooltip>
              </TableCell>
            );
          }
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Headers, JsData (–∫–Ω–æ–ø–∫–∞ + —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ JSON)
        if (cellKey === 'Headers' || cellKey === 'JsData') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor, whiteSpace: 'wrap' }}
            >
              <Button
                variant="outlined"
                color="secondary"
                onClick={() => {
                  try {
                    const data = JSON.parse(cellValue);
                    setFormattedJSON((prevState) => ({
                      ...prevState,
                      [row.ID]: {
                        ...prevState[row.ID],
                        [cellKey]: data,
                      },
                    }));
                    setExpandedCell({ rowId: row.ID, dataKey: cellKey });
                  } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö:', error);
                    setExpandedCell({ rowId: row.ID, dataKey: cellKey });
                  }
                }}
                sx={{ textTransform: 'none', padding: '2px', minWidth: '0' }}
              >
                <DataObjectIcon sx={{ width: '18px' }} />
              </Button>

              {expandedCell &&
                expandedCell.rowId === row.ID &&
                expandedCell.dataKey === cellKey &&
                formattedJSON[row.ID] &&
                formattedJSON[row.ID][cellKey] && (
                  <div
                    style={{
                      maxHeight: '500px',
                      overflowY: 'auto',
                      maxWidth: '500px',
                      overflowX: 'auto',
                      backgroundColor: '#f5f5f5',
                      padding: '10px',
                      borderRadius: '4px',
                      fontFamily: 'monospace',
                      fontSize: '14px',
                    }}
                  >
                    <JSONTree
                      data={formattedJSON[row.ID][cellKey]}
                      theme="monokai"
                      invertTheme={false}
                      shouldExpandNode={(kp, d, lvl) => lvl !== 0}
                      valueRenderer={valueRenderer}
                    />
                  </div>
                )}
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Referer
        if (cellKey === 'Referer') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <Button
                href={cellValue}
                target="_blank"
                rel="noopener noreferrer"
                style={{
                  color: '#1976d2',
                  fontWeight: '500',
                  textDecoration: 'underline',
                  cursor: 'pointer',
                  textTransform: 'lowercase',
                }}
              >
                {cellValue}
              </Button>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è IP (–æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç IPInfo)
        if (cellKey === 'IP') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <IPInfo IP={cellValue} setFilterIP={setFilterIP} />
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è Accept-Language (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
        if (cellKey === 'Accept-Language') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <div
                style={{
                  maxWidth: '200px', // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –±–ª–æ–∫–∞
                  overflow: 'hidden', // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë, —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                  textOverflow: 'ellipsis', // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "..."
                  whiteSpace: 'nowrap', // –ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                  cursor: 'pointer',
                  color: '#1976d2',
                  textDecoration: 'underline',
                }}
              >
                <AlertDialog
                  AcceptLanguage={cellValue}
                  Headers={row.Headers}
                  Label={'Headers'}
                  Title={'–ó–∞–≥–æ–ª–æ–≤–∫–∏ (Headers)'}
                  doubleOutput={doubleOutput}
                  doubleData={row.JsData}
                />
              </div>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è language (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ JS)
        if (cellKey === 'language') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <AlertDialog
                AcceptLanguage={cellValue}
                Headers={row.JsData}
                Label={'JS'}
                Title={'–î–∞–Ω–Ω—ã–µ (JS)'}
                doubleOutput={doubleOutput}
                doubleData={row.Headers}
              />
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è Gclid (–¥–ª–∏–Ω–∞)
        if (cellKey === 'Gclid') {
          return (
            <TableCell
              className="statistics__padding"
              key={cellKey}
              align="left"
              style={{ backgroundColor: rowBackgroundColor }}
            >
              <span className="statistics__gclid" title={cellValue}>
                {cellValue}
              </span>
              <span className="statistics__gclidLen">{cellValue?.length}</span>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è Device (–∑–Ω–∞—á–µ–Ω–∏–µ + —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        if (cellKey === 'Device') {
          // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
          let background = rowBackgroundColor;
          const value = (cellValue || '').toLowerCase();

          // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
          if (value === 'm') background = '#ffd5cc'; // Mobile
          else if (value === 't') background = '#ffb6a1'; // Tablet
          else if (value === 'c') background = '#ff9c86'; // Computer
          else if (value === '-') background = '#e8cff7'; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

          return (
            <TableCell className="statistics__padding" key={cellKey} align="left">
              <div
                style={{
                  fontSize: 'inherit',
                  backgroundColor: background,
                  width: '100%',
                  padding: '0 10px',
                  borderRadius: '5px',
                }}
              >
                {cellValue}
              </div>
            </TableCell>
          );
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏–∑ JsData
        if (cellKey === 'hardwareConcurrency') {
          const value = cellValue !== null && cellValue !== undefined && !isNaN(cellValue) ? cellValue : null;
          return (
            <TableCell className="statistics__padding" key={cellKey} align="left" style={{ backgroundColor: rowBackgroundColor }}>
              {value !== null ? value : '-'}
            </TableCell>
          );
        }

        if (cellKey === 'deviceMemory') {
          const value = cellValue !== null && cellValue !== undefined && !isNaN(cellValue) ? cellValue : null;
          return (
            <TableCell className="statistics__padding" key={cellKey} align="left" style={{ backgroundColor: rowBackgroundColor }}>
              {value !== null ? `${value} GB` : '-'}
            </TableCell>
          );
        }

        if (cellKey === 'clickCount') {
          const value = cellValue !== null && cellValue !== undefined && !isNaN(cellValue) ? cellValue : 0;
          return (
            <TableCell className="statistics__padding" key={cellKey} align="left" style={{ backgroundColor: rowBackgroundColor }}>
              {value}
            </TableCell>
          );
        }

        if (cellKey === 'maxScrollY') {
          const value = cellValue !== null && cellValue !== undefined && !isNaN(cellValue) ? Math.round(cellValue) : 0;
          return (
            <TableCell className="statistics__padding" key={cellKey} align="left" style={{ backgroundColor: rowBackgroundColor }}>
              {`${value}px`}
            </TableCell>
          );
        }

        if (cellKey === 'hadMouse' || cellKey === 'hadTouch' || 
            cellKey === 'hasConnection' || cellKey === 'hasMemory' || 
            cellKey === 'hasPlugins' || cellKey === 'hasDeviceOrientationEvent' || 
            cellKey === 'isTouchCapable') {
          return (
            <TableCell className="statistics__padding" key={cellKey} align="center" style={{ backgroundColor: rowBackgroundColor }}>
              {cellValue === true ? (
                <CheckIcon style={{ color: '#4caf50' }} />
              ) : cellValue === false ? (
                <CloseIcon style={{ color: '#f44336' }} />
              ) : (
                '-'
              )}
            </TableCell>
          );
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        return (
          <TableCell
            className="statistics__padding"
            key={cellKey}
            align="left"
            style={{ backgroundColor: rowBackgroundColor }}
          >
            {cellValue !== undefined && cellValue !== null && typeof cellValue !== 'object'
              ? cellValue.toString()
              : '-'}
          </TableCell>
        );
      })}
    </>
  );
}
